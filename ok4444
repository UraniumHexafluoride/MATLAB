classdef DataPlotApp_full < matlab.apps.AppBase
    % DataPlotApp_full Advanced MAT-file visualizer & transform studio
    %
    % - Nested struct/cell tree navigator (drill-down, select node, add to selection)
    % - Multi-variable plotting, subplot mode, color/marker/line/colormap controls
    % - Data transforms: smoothing (moving average), simple highpass (detrend), FFT, resample
    % - Annotations: click to add text, editable afterwards
    % - Cursor readout (live X/Y) and export of axis metadata (JSON)
    % - Presets system for plotting styles (save/load)
    % - Export: PNG / FIG / CSV
    % - Data inspector and preview + statistics panel
    %
    % Save as DataPlotApp_full.m and run.
   
    %% UI components
    properties (Access = public)
        UIFigure matlab.ui.Figure
        LeftPanel matlab.ui.container.Panel
        LoadButton matlab.ui.control.Button
        BackButton matlab.ui.control.Button
        FileLabel matlab.ui.control.Label
        TreeLabel matlab.ui.control.Label
        VarTree matlab.ui.container.Tree
        AddNodeButton matlab.ui.control.Button
        VariableListLabel matlab.ui.control.Label
        VariableListBox matlab.ui.control.ListBox
        RemoveVarButton matlab.ui.control.Button
        TransformPanel matlab.ui.container.Panel
        SmoothButton matlab.ui.control.Button
        SmoothWindowField matlab.ui.control.NumericEditField
        HighpassButton matlab.ui.control.Button
        FFTButton matlab.ui.control.Button
        ResampleButton matlab.ui.control.Button
        ResampleNField matlab.ui.control.NumericEditField
        PresetPanel matlab.ui.container.Panel
        SavePresetButton matlab.ui.control.Button
        LoadPresetButton matlab.ui.control.Button
        PresetDropDown matlab.ui.control.DropDown
        ControlsPanel matlab.ui.container.Panel
        PlotButton matlab.ui.control.Button
        PlotTypeDropDown matlab.ui.control.DropDown
        SubplotCheckBox matlab.ui.control.CheckBox
        ColorDropDown matlab.ui.control.DropDown
        MarkerDropDown matlab.ui.control.DropDown
        LineStyleDropDown matlab.ui.control.DropDown
        ColormapDropDown matlab.ui.control.DropDown
        GridCheckBox matlab.ui.control.CheckBox
        AutoFitButton matlab.ui.control.Button
        AnnotationButton matlab.ui.control.Button
        ExportPNGButton matlab.ui.control.Button
        ExportFIGButton matlab.ui.control.Button
        ExportCSVButton matlab.ui.control.Button
        InspectDataButton matlab.ui.control.Button
        XLabelField matlab.ui.control.EditField
        YLabelField matlab.ui.control.EditField
        RightPanel matlab.ui.container.Panel
        UIAxes matlab.ui.control.UIAxes
        StatsPanel matlab.ui.container.Panel
        MeanLabel matlab.ui.control.Label
        StdLabel matlab.ui.control.Label
        MinLabel matlab.ui.control.Label
        MaxLabel matlab.ui.control.Label
        DataPreviewTable matlab.ui.control.Table
        StatusLabel matlab.ui.control.Label
    end
   
    %% Internal properties
    properties (Access = private)
        DataStruct % struct loaded from .mat
        FileName % full path
        Presets % struct map of saved presets
        Annotations % handles of text annotations
        CursorListener % function handle for mouse move
        PlotTypes % struct of plotting functions
        Transforms % struct of transform functions
    end
   
    methods (Access = private)
        %% ----------------------
        %% UI and file handling
        function loadMatFile(app)
            [file, path] = uigetfile('*.mat','Select MAT file');
            if isequal(file,0)
                return;
            end
            app.FileName = fullfile(path,file);
            try
                app.DataStruct = load(app.FileName);
            catch ME
                uialert(app.UIFigure, ['Failed to load file: ' ME.message],'Load Error');
                return;
            end
            app.FileLabel.Text = ['Loaded: ' file];
            app.buildTreeFromStruct();
            app.VariableListBox.Items = {}; app.VariableListBox.Value = {};
            app.DataPreviewTable.Data = {};
            app.clearStats();
            cla(app.UIAxes);
            app.StatusLabel.Text = 'File loaded. Use tree to drill and add variables.';
        end
       
        function clearStats(app)
            app.MeanLabel.Text = 'Mean: -';
            app.StdLabel.Text = 'Std: -';
            app.MinLabel.Text = 'Min: -';
            app.MaxLabel.Text = 'Max: -';
        end
       
        function buildTreeFromStruct(app)
            % Clear existing tree
            delete(app.VarTree.Children);
            root = uitreenode(app.VarTree,'Text','(root)','NodeData',struct('type','root','path',''));
            if isempty(app.DataStruct)
                app.StatusLabel.Text = 'No variables in file.';
                return;
            end
            % For each top-level variable, create nodes recursively
            vars = fieldnames(app.DataStruct);
            for i=1:numel(vars)
                name = vars{i};
                val = app.DataStruct.(name);
                node = uitreenode(root,'Text',name,'NodeData',struct('type',class(val),'path',name));
                app.recursiveTreeFill(node, val, name, {});
            end
            expand(root);
        end
       
        function recursiveTreeFill(app, node, val, pathSoFar, visited)
            if nargin < 5, visited = {}; end
            if ismember(pathSoFar, visited)
                return; % Prevent infinite recursion
            end
            visited{end+1} = pathSoFar;
            if isstruct(val)
                f = fieldnames(val);
                for i=1:numel(f)
                    txt = f{i};
                    p = sprintf('%s.%s',pathSoFar,txt);
                    child = uitreenode(node,'Text',txt,'NodeData',struct('type',class(val.(txt)),'path',p));
                    app.recursiveTreeFill(child, val.(txt), p, visited);
                end
            elseif iscell(val)
                for i=1:numel(val)
                    txt = sprintf('{%d}',i);
                    p = sprintf('%s{%d}',pathSoFar,i);
                    child = uitreenode(node,'Text',txt,'NodeData',struct('type',class(val{i}),'path',p));
                    app.recursiveTreeFill(child, val{i}, p, visited);
                end
            elseif istable(val)
                cols = val.Properties.VariableNames;
                for i=1:numel(cols)
                    txt = cols{i};
                    p = sprintf('%s.%s',pathSoFar,txt);
                    uitreenode(node,'Text',txt,'NodeData',struct('type',class(val.(txt)),'path',p));
                end
            end
        end
       
        function addSelectedNodeToVariables(app)
            n = app.VarTree.SelectedNodes;
            if isempty(n)
                uialert(app.UIFigure,'Select a node to add.','Info'); return;
            end
            for k=1:numel(n)
                path = n(k).NodeData.path;
                items = app.VariableListBox.Items;
                if ~any(strcmp(items,path))
                    items{end+1} = path;
                end
            end
            app.VariableListBox.Items = items;
            app.StatusLabel.Text = 'Added node(s) to variable selection.';
        end
       
        function removeSelectedVars(app)
            sel = app.VariableListBox.Value;
            if isempty(sel), return; end
            items = app.VariableListBox.Items;
            items(ismember(items,sel)) = [];
            app.VariableListBox.Items = items;
            app.VariableListBox.Value = {};
            app.StatusLabel.Text = 'Removed selected variable(s).';
        end
       
        function v = getValueByPath(app, path)
            if ~ischar(path) || isempty(regexp(path, '^[a-zA-Z][\w\.{}]*$', 'once'))
                v = []; return;
            end
            expr = path;
            try
                if isempty(path)
                    v = [];
                    return;
                end
                m = regexp(path,'^([^\.\{]+)','tokens','once');
                if isempty(m)
                    v = [];
                    return;
                end
                tok = m{1};
                if ~isfield(app.DataStruct,tok)
                    v = [];
                    return;
                end
                v = app.DataStruct.(tok);
                idx = numel(tok)+1;
                while idx <= numel(path)
                    ch = path(idx);
                    if ch=='.'
                        idx = idx+1;
                        tkn = regexp(path(idx:end),'^([^\.\{]+)','tokens','once');
                        if isempty(tkn), break; end
                        fld = tkn{1};
                        if isstruct(v) && isfield(v,fld)
                            v = v.(fld);
                        elseif istable(v) && ismember(fld,v.Properties.VariableNames)
                            v = v.(fld);
                        else
                            v = [];
                            return;
                        end
                        idx = idx + numel(fld);
                    elseif ch=='{'
                        j = find(path(idx:end)=='}',1);
                        if isempty(j), break; end
                        token = path(idx+1:idx+j-2);
                        ind = str2double(token);
                        if isnan(ind), v = []; return; end
                        if iscell(v) && numel(v)>=ind
                            v = v{ind};
                        else
                            v = [];
                            return;
                        end
                        idx = idx + j;
                    else
                        idx = idx+1;
                    end
                end
            catch
                v = [];
            end
        end
       
        %% ----------------------
        %% Plotting and styles
        function initPlotTypes(app)
            app.PlotTypes = struct(...
                'Line', @(ax,data,col,mkr,lns,label) plot(ax, data, 'LineStyle', lns, 'Marker', mkr, 'DisplayName', label, 'Color', col), ...
                'Scatter', @(ax,data,col,mkr,lns,label) scatter(ax, 1:numel(data), data, 36, col, 'filled', 'DisplayName', label), ...
                'Bar', @(ax,data,col,mkr,lns,label) bar(ax, data, 'FaceColor', col), ...
                'Histogram', @(ax,data,col,mkr,lns,label) histogram(ax, data), ...
                'Surface', @(ax,data,col,mkr,lns,label) surf(ax, data), ...
                'Heatmap', @(ax,data,col,mkr,lns,label) heatmap(app.UIFigure, data));
            app.PlotTypeDropDown.Items = fieldnames(app.PlotTypes);
            app.PlotTypeDropDown.Value = 'Line';
        end
       
        function plotSelectedVars(app)
            if isempty(app.DataStruct)
                uialert(app.UIFigure,'Load a .mat file first.','Error'); return;
            end
            sel = app.VariableListBox.Value;
            if isempty(sel)
                uialert(app.UIFigure,'Select one or more variables.','Error'); return;
            end
            plotType = app.PlotTypeDropDown.Value;
            useSub = app.SubplotCheckBox.Value;
            n = numel(sel);
           
            delete(findall(app.UIFigure,'Tag','dynAx'));
            if useSub && n>1
                panelPos = app.RightPanel.Position;
                r = ceil(sqrt(n)); c = ceil(n/r);
                axs = gobjects(n,1);
                w = panelPos(3)/c; h = (panelPos(4)-80)/r;
                left0 = panelPos(1); bottom0 = panelPos(2)+10;
                for k=1:n
                    rr = ceil(k/c)-1; cc = mod(k-1,c);
                    pos = [left0 + cc*w, bottom0 + (r-1-rr)*h, w-10, h-10];
                    axs(k) = uiaxes(app.UIFigure,'Position',pos,'Tag','dynAx');
                end
                app.UIAxes.Visible = 'off';
            else
                axs = app.UIAxes;
                delete(findall(app.UIFigure,'Tag','dynAx'));
                app.UIAxes.Visible = 'on';
            end
           
            for k=1:n
                ax = axs(min(k,numel(axs)));
                cla(ax);
                path = sel{k};
                val = app.getValueByPath(path);
                if isempty(val)
                    text(ax,0.1,0.5, {['No data for ' path]},'Units','normalized');
                    continue;
                end
                if ~isnumeric(val)
                    text(ax,0.1,0.5, {['Unsupported type: ' class(val) ' for ' path]},'Units','normalized');
                    continue;
                end
                if numel(val) > 1e6
                    text(ax,0.1,0.5, {['Variable ' path ' too large to plot (>1e6 elements)']},'Units','normalized');
                    continue;
                end
                [col, mkr, lns] = app.styleSpecs();
                try
                    switch class(val)
                        case {'double', 'single'}
                            if ismember(plotType, {'Surface', 'Heatmap'}) && ~ismatrix(val)
                                text(ax,0.1,0.5, {[plotType ' requires 2D matrix for ' path]},'Units','normalized');
                                continue;
                            end
                            if isfield(app.PlotTypes, plotType)
                                app.PlotTypes.(plotType)(ax, double(val), col, mkr, lns, path);
                                if strcmp(plotType, 'Surface')
                                    colormap(ax, app.ColormapDropDown.Value); shading(ax,'interp');
                                end
                            else
                                text(ax,0.1,0.5, {'Invalid plot type'},'Units','normalized');
                            end
                        case 'table'
                            app.plotTable(ax, val, plotType, col, mkr, lns, path);
                        case 'struct'
                            app.plotStruct(ax, val, plotType, col, mkr, lns, path);
                        otherwise
                            text(ax,0.1,0.5, {['Unsupported type: ' class(val) ' for ' path]},'Units','normalized');
                    end
                    xlabel(ax, app.XLabelField.Value); ylabel(ax, app.YLabelField.Value);
                    if app.GridCheckBox.Value, grid(ax,'on'); else grid(ax,'off'); end
                    title(ax, path,'Interpreter','none');
                    if ismember(plotType, {'Line', 'Scatter', 'Bar'})
                        legend(ax,'show','Interpreter','none');
                    end
                    if k==1
                        app.updatePreviewAndStats(val);
                    end
                catch ME
                    text(ax,0.1,0.5, {['Plot error: ' ME.message]},'Units','normalized');
                end
            end
            app.StatusLabel.Text = 'Plot complete.';
        end
       
        function [col, mkr, lns] = styleSpecs(app)
            c = app.ColorDropDown.Value;
            switch c
                case 'Auto', col = []; case 'Blue', col=[0 0.4470 0.7410];
                case 'Red', col=[0.8500 0.3250 0.0980];
                case 'Green', col=[0.4660 0.6740 0.1880];
                case 'Black', col=[0 0 0];
                case 'Magenta', col=[0.4940 0.1840 0.5560];
                otherwise, col=[];
            end
            mk = app.MarkerDropDown.Value;
            switch mk
                case 'None', mkr='none'; case 'Circle', mkr='o'; case 'Square', mkr='s';
                case 'Plus', mkr='+'; case 'Star', mkr='*'; case 'Dot', mkr='.';
                otherwise, mkr='none';
            end
            ls = app.LineStyleDropDown.Value;
            switch ls
                case 'Solid', lns='-'; case 'Dashed', lns='--'; case 'Dotted', lns=':'; case 'DashDot', lns='-.';
                case 'None', lns='none'; otherwise, lns='-';
            end
        end
       
        function plotTable(app, ax, tbl, plotType, col, mkr, lns, label)
            vars = tbl.Properties.VariableNames;
            numericCols = varfun(@isnumeric,tbl,'OutputFormat','uniform');
            if ~any(numericCols)
                text(ax,0.1,0.5,{'No numeric columns'},'Units','normalized'); return;
            end
            arr = table2array(tbl(:,numericCols));
            if isfield(app.PlotTypes, plotType)
                app.PlotTypes.(plotType)(ax, arr, col, mkr, lns, label);
                legend(ax, vars(numericCols),'Interpreter','none');
            else
                text(ax,0.1,0.5,{'Invalid plot type'},'Units','normalized');
            end
        end
       
        function plotStruct(app, ax, s, plotType, col, mkr, lns, label)
            f = fieldnames(s);
            plotted = false;
            for i=1:numel(f)
                v = s.(f{i});
                if isnumeric(v)
                    plotted = true;
                    if isfield(app.PlotTypes, plotType)
                        app.PlotTypes.(plotType)(ax, v, col, mkr, lns, f{i});
                    end
                end
            end
            if plotted
                legend(ax,'show','Interpreter','none');
            else
                text(ax,0.1,0.5,{'No numeric fields'},'Units','normalized');
            end
        end
       
        function updatePreviewAndStats(app, val)
            if isempty(val)
                app.DataPreviewTable.Data = {};
                app.clearStats(); return;
            end
            if istable(val)
                try
                    app.DataPreviewTable.Data = table2cell(head(val, min(10,height(val))));
                catch
                    app.DataPreviewTable.Data = {};
                end
                numericCols = varfun(@isnumeric,val,'OutputFormat','uniform');
                if any(numericCols)
                    d = table2array(val(:,find(numericCols,1)));
                    s = app.computeNumericStats(d);
                    app.updateStatsLabels(s);
                else
                    app.clearStats();
                end
            elseif isnumeric(val)
                if isvector(val)
                    n = min(20,numel(val));
                    app.DataPreviewTable.Data = num2cell(val(1:n));
                else
                    m = min(10,size(val,1));
                    app.DataPreviewTable.Data = num2cell(val(1:m,:));
                end
                s = app.computeNumericStats(val);
                app.updateStatsLabels(s);
            else
                app.DataPreviewTable.Data = {'<preview unavailable>'};
                app.clearStats();
            end
        end
       
        function s = computeNumericStats(app, data)
            if ~isnumeric(data) || issparse(data)
                s = struct('mean',NaN,'std',NaN,'min',NaN,'max',NaN);
                return;
            end
            d = data(:); d = d(~isnan(d));
            if isempty(d)
                s = struct('mean',NaN,'std',NaN,'min',NaN,'max',NaN);
            else
                s = struct('mean',mean(double(d)),'std',std(double(d)),'min',min(d),'max',max(d));
            end
        end
       
        function updateStatsLabels(app, s)
            app.MeanLabel.Text = sprintf('Mean: %.4g', s.mean);
            app.StdLabel.Text = sprintf('Std: %.4g', s.std);
            app.MinLabel.Text = sprintf('Min: %.4g', s.min);
            app.MaxLabel.Text = sprintf('Max: %.4g', s.max);
        end
       
        %% ----------------------
        %% Data transforms
        function initTransforms(app)
            app.Transforms = struct(...
                'Smoothing', @(data,w) conv(data(:), ones(w,1)/w, 'same'), ...
                'Highpass', @(data,w) data(:) - conv(data(:), ones(w,1)/w, 'same'), ...
                'Resample', @(data,N) interp1(1:numel(data), double(data), linspace(1,numel(data),N), 'linear'));
        end
       
        function applySmoothing(app)
            sel = app.VariableListBox.Value;
            if isempty(sel), uialert(app.UIFigure,'Select a variable.','Info'); return; end
            w = max(1, round(app.SmoothWindowField.Value));
            root = app.VarTree.Children(1); % Assume root exists
            for k=1:numel(sel)
                v = app.getValueByPath(sel{k});
                if isnumeric(v) && isvector(v)
                    newName = [sel{k} '_sm' num2str(w)];
                    validName = matlab.lang.makeValidName(newName);
                    if isfield(app.DataStruct, validName)
                        choice = uiconfirm(app.UIFigure, ['Overwrite ' newName '?'], 'Confirm', 'Options', {'Overwrite', 'Cancel'}, 'DefaultOption', 'Cancel');
                        if strcmp(choice, 'Cancel'), continue; end
                    end
                    sm = app.Transforms.Smoothing(v, w);
                    app.DataStruct.(validName) = sm;
                    uitreenode(root, 'Text', newName, 'NodeData', struct('type', 'double', 'path', newName));
                else
                    uialert(app.UIFigure, ['Cannot smooth variable: ' sel{k}], 'Info');
                end
            end
            app.StatusLabel.Text = 'Smoothing applied; new variables added with _sm suffix.';
        end
       
        function applyHighpass(app)
            sel = app.VariableListBox.Value;
            if isempty(sel), uialert(app.UIFigure,'Select variable.','Info'); return; end
            w = max(5, round(app.SmoothWindowField.Value));
            root = app.VarTree.Children(1);
            for k=1:numel(sel)
                v = app.getValueByPath(sel{k});
                if isnumeric(v) && isvector(v)
                    newName = [sel{k} '_hp' num2str(w)];
                    validName = matlab.lang.makeValidName(newName);
                    if isfield(app.DataStruct, validName)
                        choice = uiconfirm(app.UIFigure, ['Overwrite ' newName '?'], 'Confirm', 'Options', {'Overwrite', 'Cancel'}, 'DefaultOption', 'Cancel');
                        if strcmp(choice, 'Cancel'), continue; end
                    end
                    hp = app.Transforms.Highpass(v, w);
                    app.DataStruct.(validName) = hp;
                    uitreenode(root, 'Text', newName, 'NodeData', struct('type', 'double', 'path', newName));
                else
                    uialert(app.UIFigure, ['Cannot highpass variable: ' sel{k}], 'Info');
                end
            end
            app.StatusLabel.Text = 'Highpass applied; new variables added with _hp suffix.';
        end
       
        function computeFFT(app)
            sel = app.VariableListBox.Value;
            if isempty(sel), uialert(app.UIFigure,'Select variable.','Info'); return; end
            for k=1:numel(sel)
                v = app.getValueByPath(sel{k});
                if isnumeric(v) && isvector(v)
                    n = numel(v);
                    Y = fft(double(v));
                    f = (0:n-1)/n;
                    mag = abs(Y);
                    figure('Name',['FFT: ' sel{k}]); plot(f, mag); xlabel('Normalized freq'); ylabel('|Y|'); title(['FFT magnitude: ' sel{k}]);
                else
                    uialert(app.UIFigure, ['Cannot FFT variable: ' sel{k}], 'Info');
                end
            end
        end
       
        function applyResample(app)
            sel = app.VariableListBox.Value;
            N = max(1, round(app.ResampleNField.Value));
            if isempty(sel), uialert(app.UIFigure,'Select variable.','Info'); return; end
            root = app.VarTree.Children(1);
            for k=1:numel(sel)
                v = app.getValueByPath(sel{k});
                if isnumeric(v) && isvector(v)
                    newName = [sel{k} '_rs' num2str(N)];
                    validName = matlab.lang.makeValidName(newName);
                    if isfield(app.DataStruct, validName)
                        choice = uiconfirm(app.UIFigure, ['Overwrite ' newName '?'], 'Confirm', 'Options', {'Overwrite', 'Cancel'}, 'DefaultOption', 'Cancel');
                        if strcmp(choice, 'Cancel'), continue; end
                    end
                    vi = app.Transforms.Resample(v, N);
                    app.DataStruct.(validName) = vi;
                    uitreenode(root, 'Text', newName, 'NodeData', struct('type', 'double', 'path', newName));
                else
                    uialert(app.UIFigure, ['Cannot resample variable: ' sel{k}], 'Info');
                end
            end
            app.StatusLabel.Text = 'Resampling done; new variables added with _rsN suffix.';
        end
       
        %% ----------------------
        %% Annotations & cursor
        function addAnnotation(app)
            uialert(app.UIFigure,'Click on the plot to place annotation, then enter text in prompt.','Instruction');
            ax = app.UIAxes;
            try
                [x,y] = ginput(1);
            catch
                return;
            end
            s = inputdlg('Annotation text:','Add annotation',{''});
            if isempty(s), return; end
            t = text(ax,x,y,s{1},'Color','k','FontSize',10,'Interpreter','none','BackgroundColor','white');
            if isempty(app.Annotations), app.Annotations = gobjects(0); end
            app.Annotations(end+1) = t;
            app.StatusLabel.Text = 'Annotation added.';
        end
       
        function enableCursorReadout(app)
            f = app.UIFigure;
            app.CursorListener = @(src,ev) app.cursorMoveCallback();
            f.WindowButtonMotionFcn = app.CursorListener;
        end
       
        function cursorMoveCallback(app)
            cp = get(app.UIAxes,'CurrentPoint');
            x = cp(1,1); y = cp(1,2);
            if ~isempty(app.FileName)
                app.StatusLabel.Text = sprintf('Cursor: x=%.4g, y=%.4g', x, y);
            else
                app.StatusLabel.Text = sprintf('Cursor: x=%.4g, y=%.4g', x, y);
            end
        end
       
        function exportAxisMetadata(app)
            ax = app.UIAxes;
            meta = struct();
            meta.XLabel = app.XLabelField.Value;
            meta.YLabel = app.YLabelField.Value;
            meta.XLim = get(ax,'XLim');
            meta.YLim = get(ax,'YLim');
            meta.Title = ax.Title.String;
            [f,p] = uiputfile('*.json','Save axis metadata');
            if isequal(f,0), return; end
            fname = fullfile(p,f);
            try
                s = jsonencode(meta);
                fid = fopen(fname,'w');
                fwrite(fid,s,'char');
                fclose(fid);
                uialert(app.UIFigure,'Axis metadata saved.','Saved');
            catch ME
                uialert(app.UIFigure,['Save failed: ' ME.message],'Error');
            end
        end
       
        %% ----------------------
        %% Presets
        function initPresets(app)
            app.Presets = struct();
            pfile = fullfile(prefdir,'DataPlotApp_presets.mat');
            if exist(pfile,'file')
                try
                    S = load(pfile);
                    if isfield(S,'Presets'), app.Presets = S.Presets; end
                end
            end
            app.refreshPresetDropdown();
        end
       
        function refreshPresetDropdown(app)
            names = fieldnames(app.Presets);
            if isempty(names)
                app.PresetDropDown.Items = {'(none)'};
            else
                app.PresetDropDown.Items = names;
            end
        end
       
        function saveCurrentPreset(app)
            name = inputdlg('Preset name:','Save Preset',{['preset_' datestr(now,'yyyymmdd_HHMMSS')]});
            if isempty(name), return; end
            nm = name{1};
            preset = struct();
            preset.Color = app.ColorDropDown.Value;
            preset.Marker = app.MarkerDropDown.Value;
            preset.Line = app.LineStyleDropDown.Value;
            preset.PlotType = app.PlotTypeDropDown.Value;
            preset.Colormap = app.ColormapDropDown.Value;
            preset.Grid = app.GridCheckBox.Value;
            preset.XLabel = app.XLabelField.Value;
            preset.YLabel = app.YLabelField.Value;
            app.Presets.(matlab.lang.makeValidName(nm)) = preset;
            pfile = fullfile(prefdir,'DataPlotApp_presets.mat');
            Presets = app.Presets;
            save(pfile,'Presets');
            app.refreshPresetDropdown();
            uialert(app.UIFigure,'Preset saved.','Saved');
        end
       
        function loadSelectedPreset(app)
            sel = app.PresetDropDown.Value;
            if isempty(sel) || strcmp(sel,'(none)'), uialert(app.UIFigure,'No preset selected.','Info'); return; end
            if ~isfield(app.Presets,sel), uialert(app.UIFigure,'Preset not found.','Error'); return; end
            p = app.Presets.(sel);
            app.ColorDropDown.Value = p.Color;
            app.MarkerDropDown.Value = p.Marker;
            app.LineStyleDropDown.Value = p.Line;
            app.PlotTypeDropDown.Value = p.PlotType;
            app.ColormapDropDown.Value = p.Colormap;
            app.GridCheckBox.Value = p.Grid;
            app.XLabelField.Value = p.XLabel;
            app.YLabelField.Value = p.YLabel;
            app.StatusLabel.Text = ['Loaded preset: ' sel];
        end
       
        %% ----------------------
        %% Exports
        function exportPNG(app)
            [f,p] = uiputfile('*.png','Save PNG');
            if isequal(f,0), return; end
            fname = fullfile(p,f);
            dyn = findall(app.UIFigure,'Tag','dynAx');
            try
                if ~isempty(dyn)
                    if exist('exportgraphics', 'builtin')
                        exportgraphics(app.UIFigure, fname, 'BackgroundColor', 'white');
                    else
                        saveas(app.UIFigure, fname, 'png');
                    end
                else
                    if exist('exportgraphics', 'builtin')
                        exportgraphics(app.UIAxes, fname, 'BackgroundColor', 'white');
                    else
                        saveas(app.UIAxes, fname, 'png');
                    end
                end
                uialert(app.UIFigure,'PNG saved.','Saved');
            catch ME
                uialert(app.UIFigure,['Save failed: ' ME.message],'Error');
            end
        end
       
        function exportFIG(app)
            [f,p] = uiputfile('*.fig','Save FIG');
            if isequal(f,0), return; end
            fname = fullfile(p,f);
            dyn = findall(app.UIFigure,'Tag','dynAx');
            fig = figure('Visible','off');
            try
                if ~isempty(dyn)
                    for k=1:numel(dyn)
                        copyobj(dyn(k),fig);
                    end
                else
                    copyobj(app.UIAxes,fig);
                end
                savefig(fig,fname); close(fig);
                uialert(app.UIFigure,'FIG saved.','Saved');
            catch ME
                close(fig); uialert(app.UIFigure,['Save failed: ' ME.message],'Error');
            end
        end
       
        function exportCSV(app)
            sel = app.VariableListBox.Value;
            if isempty(sel), uialert(app.UIFigure,'Select variable(s) to export.','Info'); return; end
            [f,p] = uiputfile('*.csv','Save CSV');
            if isequal(f,0), return; end
            fname = fullfile(p,f);
            T = table();
            for i=1:numel(sel)
                v = app.getValueByPath(sel{i});
                if isnumeric(v)
                    col = v(:);
                    name = matlab.lang.makeValidName(sel{i});
                    T.(name) = col;
                elseif istable(v)
                    arr = table2array(v);
                    for c=1:size(arr,2)
                        cname = matlab.lang.makeValidName([sel{i} '_' v.Properties.VariableNames{c}]);
                        T.(cname) = arr(:,c);
                    end
                end
            end
            try
                writetable(T,fname);
                uialert(app.UIFigure,'CSV saved.','Saved');
            catch ME
                uialert(app.UIFigure,['Save failed: ' ME.message],'Error');
            end
        end
       
        %% ----------------------
        %% Data inspector
        function inspectData(app)
            sel = app.VariableListBox.Value;
            if isempty(sel), uialert(app.UIFigure,'Select a variable to inspect.','Info'); return; end
            name = sel{1};
            v = app.getValueByPath(name);
            f = uifigure('Name',['Inspect: ' name],'Position',[200 200 700 400]);
            uit = uitable(f,'Position',[10 10 680 380]);
            if istable(v)
                uit.Data = table2cell(v);
                uit.ColumnName = v.Properties.VariableNames;
            elseif isnumeric(v)
                if isvector(v)
                    uit.Data = num2cell(v(:));
                else
                    uit.Data = num2cell(v);
                end
            else
                uit.Data = {['Cannot display type: ' class(v)]};
            end
        end
       
        %% ----------------------
        %% Helper UI update hooks
        function onTreeSelectionChanged(app, ~)
            n = app.VarTree.SelectedNodes;
            if isempty(n), return; end
            app.StatusLabel.Text = ['Selected: ' n(1).NodeData.path];
        end
       
        function onVariableListChanged(app, ~)
            sel = app.VariableListBox.Value;
            if isempty(sel), return; end
            v = app.getValueByPath(sel{1});
            app.updatePreviewAndStats(v);
        end
    end
   
    %% Callbacks wiring
    methods (Access = private)
        function onLoadButton(app,~,~), app.loadMatFile(); end
        function onBackButton(app,~,~)
            app.DataStruct=[]; app.FileName=''; app.FileLabel.Text='No file loaded.';
            app.VarTree.Children = []; app.VariableListBox.Items = {}; app.VariableListBox.Value = {};
            app.DataPreviewTable.Data = {}; app.clearStats(); cla(app.UIAxes); delete(findall(app.UIFigure,'Tag','dynAx'));
        end
        function onAddNode(app,~,~), app.addSelectedNodeToVariables(); end
        function onRemoveVar(app,~,~), app.removeSelectedVars(); end
        function onPlotButton(app,~,~), app.plotSelectedVars(); end
        function onSmooth(app,~,~), app.applySmoothing(); end
        function onHighpass(app,~,~), app.applyHighpass(); end
        function onFFT(app,~,~), app.computeFFT(); end
        function onResample(app,~,~), app.applyResample(); end
        function onSavePreset(app,~,~), app.saveCurrentPreset(); end
        function onLoadPreset(app,~,~), app.loadSelectedPreset(); end
        function onPresetChange(app,~,~), app.loadSelectedPreset(); end
        function onExportPNG(app,~,~), app.exportPNG(); end
        function onExportFIG(app,~,~), app.exportFIG(); end
        function onExportCSV(app,~,~), app.exportCSV(); end
        function onInspectData(app,~,~), app.inspectData(); end
        function onAnnotation(app,~,~), app.addAnnotation(); end
        function onAutoFit(app,~,~), delete(findall(app.UIFigure,'Tag','dynAx')); app.UIAxes.Visible='on'; axis(app.UIAxes,'tight'); view(app.UIAxes,2); end
        function onTreeSelectCallback(app,~,~), app.onTreeSelectionChanged(); end
        function onVarListChangedCallback(app,~,~), app.onVariableListChanged(); end
    end
   
    %% Component creation
    methods (Access = private)
        function createComponents(app)
            app.UIFigure = uifigure('Name','DataPlotApp_full','Position',[80 80 1200 800]);
            app.LeftPanel = uipanel(app.UIFigure,'Title','Data & Transforms','Position',[10 10 320 780]);
            app.LoadButton = uibutton(app.LeftPanel,'push','Text','Load .mat','Position',[10 730 90 30],...
                'ButtonPushedFcn',@(btn,event)app.onLoadButton());
            app.BackButton = uibutton(app.LeftPanel,'push','Text','Back','Position',[110 730 60 30],...
                'ButtonPushedFcn',@(btn,event)app.onBackButton());
            app.FileLabel = uilabel(app.LeftPanel,'Text','No file loaded.','Position',[10 705 300 20]);
            app.TreeLabel = uilabel(app.LeftPanel,'Text','Structure Tree','Position',[10 675 100 20]);
            app.VarTree = uitree(app.LeftPanel,'Position',[10 420 300 250],'SelectionChangedFcn',@(src,event)app.onTreeSelectCallback());
            app.AddNodeButton = uibutton(app.LeftPanel,'push','Text','Add node ->','Position',[10 390 120 24],'ButtonPushedFcn',@(btn,event)app.onAddNode());
            app.VariableListLabel = uilabel(app.LeftPanel,'Text','Variable Selection','Position',[150 395 120 20]);
            app.VariableListBox = uilistbox(app.LeftPanel,'Position',[10 240 300 140],'Multiselect','on','ValueChangedFcn',@(src,event)app.onVarListChangedCallback());
            app.RemoveVarButton = uibutton(app.LeftPanel,'push','Text','Remove Selected','Position',[10 210 120 24],'ButtonPushedFcn',@(btn,event)app.onRemoveVar());
           
            app.TransformPanel = uipanel(app.LeftPanel,'Title','Transforms','Position',[10 120 300 80]);
            app.SmoothWindowField = uieditfield(app.TransformPanel,'numeric','Position',[10 35 60 22],'Value',5);
            uilabel(app.TransformPanel,'Text','Window','Position',[10 60 60 16]);
            app.SmoothButton = uibutton(app.TransformPanel,'push','Text','Smoothing','Position',[80 35 90 24],'ButtonPushedFcn',@(btn,event)app.onSmooth());
            app.HighpassButton = uibutton(app.TransformPanel,'push','Text','High-pass','Position',[180 35 100 24],'ButtonPushedFcn',@(btn,event)app.onHighpass());
            app.FFTButton = uibutton(app.TransformPanel,'push','Text','FFT','Position',[10 5 60 24],'ButtonPushedFcn',@(btn,event)app.onFFT());
            app.ResampleNField = uieditfield(app.TransformPanel,'numeric','Position',[80 5 60 22],'Value',100);
            app.ResampleButton = uibutton(app.TransformPanel,'push','Text','Resample','Position',[150 5 120 24],'ButtonPushedFcn',@(btn,event)app.onResample());
           
            app.PresetPanel = uipanel(app.LeftPanel,'Title','Presets','Position',[10 40 300 70]);
            app.PresetDropDown = uidropdown(app.PresetPanel,'Items',{'(none)'},'Position',[10 30 140 22],'ValueChangedFcn',@(src,event)app.onPresetChange());
            app.SavePresetButton = uibutton(app.PresetPanel,'push','Text','Save Preset','Position',[160 30 120 24],'ButtonPushedFcn',@(btn,event)app.onSavePreset());
            app.LoadPresetButton = uibutton(app.PresetPanel,'push','Text','Load Preset','Position',[160 5 120 24],'ButtonPushedFcn',@(btn,event)app.onLoadPreset());
           
            app.ControlsPanel = uipanel(app.UIFigure,'Title','Plot Controls','Position',[340 10 240 200]);
            app.PlotButton = uibutton(app.ControlsPanel,'push','Text','Plot','Position',[10 155 70 30],'ButtonPushedFcn',@(btn,event)app.onPlotButton());
            uilabel(app.ControlsPanel,'Text','Plot Type','Position',[90 162 60 20]);
            app.PlotTypeDropDown = uidropdown(app.ControlsPanel,'Items',{},'Position',[150 160 80 22]);
            app.SubplotCheckBox = uicheckbox(app.ControlsPanel,'Text','Subplot mode','Position',[10 125 120 20],'Value',false);
            uilabel(app.ControlsPanel,'Text','Color','Position',[10 95 40 20]);
            app.ColorDropDown = uidropdown(app.ControlsPanel,'Items',{'Auto','Blue','Red','Green','Black','Magenta'},'Value','Auto','Position',[60 95 90 22]);
            uilabel(app.ControlsPanel,'Text','Marker','Position',[10 65 50 20]);
            app.MarkerDropDown = uidropdown(app.ControlsPanel,'Items',{'None','Circle','Square','Plus','Star','Dot'},'Value','None','Position',[60 65 90 22]);
            uilabel(app.ControlsPanel,'Text','Line','Position',[10 35 30 20]);
            app.LineStyleDropDown = uidropdown(app.ControlsPanel,'Items',{'Solid','Dashed','Dotted','DashDot','None'},'Value','Solid','Position',[60 35 90 22]);
            uilabel(app.ControlsPanel,'Text','Colormap','Position',[10 5 60 20]);
            app.ColormapDropDown = uidropdown(app.ControlsPanel,'Items',{'parula','jet','hot','cool','hsv','gray'},'Value','parula','Position',[70 5 90 22]);
            app.GridCheckBox = uicheckbox(app.ControlsPanel,'Text','Show Grid','Position',[160 95 80 20],'Value',true);
            app.AutoFitButton = uibutton(app.ControlsPanel,'push','Text','Auto-fit','Position',[160 65 60 24],'ButtonPushedFcn',@(btn,event)app.onAutoFit());
            app.AnnotationButton = uibutton(app.ControlsPanel,'push','Text','Add Annotation','Position',[160 35 80 24],'ButtonPushedFcn',@(btn,event)app.onAnnotation());
            app.ExportPNGButton = uibutton(app.ControlsPanel,'push','Text','Export PNG','Position',[160 5 80 24],'ButtonPushedFcn',@(btn,event)app.onExportPNG());
           
            app.RightPanel = uipanel(app.UIFigure,'Title','Plot & Info','Position',[590 10 600 780]);
            app.UIAxes = uiaxes(app.RightPanel,'Position',[10 150 580 600]);
            axtoolbar(app.UIAxes,{'pan','zoomin','zoomout','rotate','restoreview'});
            uilabel(app.RightPanel,'Text','X Label','Position',[10 110 60 20]);
            app.XLabelField = uieditfield(app.RightPanel,'text','Position',[70 110 200 22],'Value','X');
            uilabel(app.RightPanel,'Text','Y Label','Position',[290 110 60 20]);
            app.YLabelField = uieditfield(app.RightPanel,'text','Position',[350 110 200 22],'Value','Y');
            app.ExportFIGButton = uibutton(app.RightPanel,'push','Text','Export FIG','Position',[10 80 100 28],'ButtonPushedFcn',@(btn,event)app.onExportFIG());
            app.ExportCSVButton = uibutton(app.RightPanel,'push','Text','Export CSV','Position',[120 80 100 28],'ButtonPushedFcn',@(btn,event)app.onExportCSV());
            app.InspectDataButton = uibutton(app.RightPanel,'push','Text','Inspect','Position',[230 80 80 28],'ButtonPushedFcn',@(btn,event)app.onInspectData());
            app.StatusLabel = uilabel(app.RightPanel,'Text','Ready','Position',[10 50 400 20]);
           
            app.DataPreviewTable = uitable(app.RightPanel,'Position',[10 10 380 32]);
            app.StatsPanel = uipanel(app.RightPanel,'Title','Stats','Position',[400 10 190 120]);
            app.MeanLabel = uilabel(app.StatsPanel,'Text','Mean: -','Position',[10 70 170 18]);
            app.StdLabel = uilabel(app.StatsPanel,'Text','Std: -','Position',[10 50 170 18]);
            app.MinLabel = uilabel(app.StatsPanel,'Text','Min: -','Position',[10 30 170 18]);
            app.MaxLabel = uilabel(app.StatsPanel,'Text','Max: -','Position',[10 10 170 18]);
        end
    end
   
    %% Constructor
    methods (Access = public)
        function app = DataPlotApp_full()
            createComponents(app);
            initPlotTypes(app);
            initTransforms(app);
            app.initPresets();
            app.enableCursorReadout();
            app.StatusLabel.Text = 'Ready. Load a .mat file to begin.';
        end
    end
end
